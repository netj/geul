#!/usr/bin/env bash
# geul-ls -- retreive list of articles in archive
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2009-03-15
set -e
. "$GEUL.sh"
. "$GEUL.this-runs-on-stage"

# prepare options
Prefix=`geul-path-parse`
Suffices=(.txt .xhtml .html .atom)
Roots=("$GEUL_STAGE")
RootsToFind=("$GEUL_STAGE")
PreservePrefixes=false
PreserveSuffixes=false
ListArchive=false
ListOptions=()
while getopts "Apstr" o; do
    case $o in
        A) ListArchive=true ;;
        p) PreservePrefixes=true ;;
        s) PreserveSuffixes=true ;;
        t) ListOptions+=(-t) ;;
        r) ListOptions+=(-r) ;;
    esac
done
shift $(($OPTIND - 1))

## prepare query
if $ListArchive; then
    Roots+=("$GEUL_DIR/archive")
    if [ x"${GEUL_DIR#$GEUL_STAGE}" = x"$GEUL_DIR" ]; then
        # if GEUL_DIR is not under GEUL_STAGE
        RootsToFind+=("$GEUL_DIR/archive")
    fi
    for s in "${Suffices[@]}"
    do Suffices+=("$s,v")
    done
fi

# path query
pathq=()
if [ $# -eq 0 ]; then
    set -- "."
fi
for Path; do
    Path=`readlink -f "$Path"`
    Path=${Path#$GEUL_STAGE}
    Path=${Path#/}
    Path=${Path%/}
    for root in "${Roots[@]}"; do
        p="$root/$Path"
        if [ -d "$p" ]; then
            p="${p%/}/"
        fi
        p="$p*"
        pathq+=(${pathq:+-o} -ipath "$p")
    done
done
[ ${#pathq[@]} = 0 ] || pathq=(\( "${pathq[@]}" \))

# name query
nameq=()
for s in "${Suffices[@]}"
do nameq+=(${nameq:+-o} -name "*$s")
done
[ ${#nameq[@]} = 0 ] || nameq=(\( "${nameq[@]}" \))


## steps for processing output
# listing order
order() {
    xargs ls "${ListOptions[@]}"
}

remove_prefixes() {
    local remove_prefixed_roots=
    for root in "${Roots[@]}"; do
        remove_prefixed_roots="${remove_prefixed_roots:+$remove_prefixed_roots|}$root"
    done
    remove_prefixed_roots=${remove_prefixed_roots//./\\.}
    remove_prefixed_roots="s:^($remove_prefixed_roots)/::;"
    sed -E "$remove_prefixed_roots"
}
remove_suffices() {
    local remove_suffices="s/(`tr ' ' '|' <<<"${Suffices[*]}" | sed 's/\./\\./g'`)$//;"
    sed -E "$remove_suffices"
}

# pretty printing
polish() {
    make_relative_to_stage() {
        sed -E "s:^$GEUL_STAGE/::"
    }
    remove_redundancies() {
        awk '!a[$0]++'
    }
    make_relative_to_stage |
    if [ -t 1 ]; then
        remove_redundancies |
        column
    else
        remove_redundancies
    fi
}

process() {
    local cmd
    cmd=(order)
    $PreservePrefixes || cmd+=(\| remove_prefixes)
    $PreserveSuffixes || cmd+=(\| remove_suffices)
    cmd+=(\| polish)
    eval "${cmd[@]}"
}


## list
cd "$GEUL_STAGE"
find "${RootsToFind[@]}" -type f "${pathq[@]}" ! -name ".geul.*" "${nameq[@]}" |
process
