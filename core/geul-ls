#!/usr/bin/env bash
# geul-ls -- retreive list of resources in the repository
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2009-03-15
set -e
. "$GEUL.sh"
. "$GEUL.running-inside-a-repo"

# prepare options
ListStaged=false
ListAllResources=false
ListId=false
ListOptions=()
while getopts "atrsi" o; do
    case $o in
        a) ListAllResources=true ;;
        t) ListOptions+=(-t) ;;
        r) ListOptions+=(-r) ;;
        s) ListStaged=true ;;
        i) ListId=true ;;
    esac
done
shift $(($OPTIND - 1))

## prepare query
if $ListAllResources; then
    Suffices=()
else
    # TODO move suffices to $GEUL_DIR/suffices?
    Suffices=(.geul .xhtml .html .atom)
fi

if $ListStaged; then
    Root="$GEUL_STAGE"
else
    Root="$GEUL_ROOT"
fi

# path query
GEUL_ROOT=`readlink -f "$GEUL_ROOT"`
pathq=()
if [ $# -eq 0 ]; then
    set -- "."
fi
for Path; do
    p=`readlink -f "$Path" || echo "$Path"`
    p=${p#$GEUL_ROOT}
    p=${p#/}
    p=${p%/}
    if [ -d "$Path" ]; then
        p="$p/"
    fi
    if [ -n "$p" ]; then
        p="$p*"
        pathq+=(${pathq:+-o} -ipath "$p")
    fi
done
[ ${#pathq[@]} = 0 ] || pathq=(\( "${pathq[@]}" \))

# name query
nameq=()
for s in "${Suffices[@]}"
do nameq+=(${nameq:+-o} -name "*$s")
done
[ ${#nameq[@]} = 0 ] || nameq=(\( "${nameq[@]}" \))


## steps for processing output
# listing order
order() {
    xargs ls "${ListOptions[@]}"
}

remove_ignored() {
    # remove resources listed in $GEUL_DIR/ignore file
    local e= p
    for p in `sed 's/#.*$//' <"$GEUL_DIR/ignore"`; do
        p=${p//./\\.}
        p=${p//\*/.*}
        p=${p//\?/.}
        e="$e/^$p$/d;"
    done
    sed "$e"
}

remove_suffices() {
    local patts=`tr ' ' '|' <<<"${Suffices[*]}" | sed 's/\.\||/\\\\&/g'`
    sed "s/\($patts\)$//;"
}

# pretty printing
polish() {
    remove_redundancies() {
        awk '!a[$0]++'
    }
    make_relative_to_root() {
        sed "s:^$GEUL_ROOT/::"
    }
    make_relative_to_pwd() {
        sed "
        \:^$GEUL_PATH/: ! s:^:`sed 's:[^/]*/:../:g' <<<"$GEUL_PATH/"`:
        s:^$GEUL_PATH/::
        "
    }
    local cmd
    cmd=(remove_redundancies)
    cmd+=(\| make_relative_to_root)
    [ -z "$GEUL_PATH" ] || cmd+=(\| make_relative_to_pwd)
    if [ -t 1 ]; then
        cmd+=(\| column)
    fi
    eval "${cmd[@]}"
}

process() {
    local cmd
    cmd=(order)
    if [ -r "$GEUL_DIR/ignore" ]; then
        cmd+=(\| remove_ignored)
    fi
    ! $ListId || cmd+=(\| remove_suffices)
    cmd+=(\| polish)
    eval "${cmd[@]}"
}


## list
cd "$Root"
find * -type f "${pathq[@]}" "${nameq[@]}" |
process
