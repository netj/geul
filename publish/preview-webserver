#!/usr/bin/env python
# preview-webserver -- a simple HTTP server for previewing articles
#
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2011-01-17
# This is a derived work from http://fragments.turtlemeat.com/pythonwebserver.php
# Copyright Jon Berg , turtlemeat.com

import sys,os
import string,cgi,time
from os import sep
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

GEUL_DATADIR = os.getenv("GEUL_DATADIR")
GEUL_ROOT = os.getenv("GEUL_ROOT")
GEUL_STAGE = os.getenv("GEUL_STAGE")
GEUL_BASEURLPATH = '/' + os.getenv("GEUL_BASEURLPATH")

class NotModified(Exception):
    def __init__(self):
        return

class PreviewHandler(BaseHTTPRequestHandler):

    def etag_for(self, f):
        s = os.stat(f)
        return  '"' + str(s.st_ino) + "-" + str(s.st_mtime) + '"'

    def check_conditional_request(self, p):
        try:
            etag = self.headers['If-None-Match']
            if etag == self.etag_for(p):
                raise NotModified()
        except KeyError:
            return

    def headers_for_file(self, f):
        self.send_header('ETag', self.etag_for(f))

    def serve_file(self, p):
        self.check_conditional_request(p)
        # send its headers
        self.send_response(200)
        # TODO detect MIME type
        #self.send_header('Content-type', 'application/json; charset=utf-8')
        self.headers_for_file(p)
        self.end_headers()
        # and its contents
        f = open(p)
        self.wfile.write(f.read())
        f.close()
        return

    def do_GET(self):
        try:
            relpath = self.path
            if relpath.startswith(GEUL_BASEURLPATH):
                relpath = relpath.replace(GEUL_BASEURLPATH, "/", 1)
            else:
                return

            # detect directories
            if (not relpath.endswith('/')) and os.path.isdir(GEUL_ROOT + sep + relpath):
                self.send_response(302)
                self.send_header('Location', self.path + '/')
                self.end_headers()
                return

            # use index
            if relpath.endswith('/'):
                relpath += 'index'
                
            g = GEUL_ROOT + sep + relpath + '.geul'
            if relpath.startswith('/.geul/'):
                # map /.geul/
                p = relpath.replace('/.geul/', GEUL_DATADIR + '/publish/chrome/')
                return self.serve_file(p)
            elif os.path.exists(g):
                # publish it first
                os.system("geul-publish " + g)
                # send it
                h = GEUL_STAGE + sep + relpath + '.html'
                self.check_conditional_request(h)
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.headers_for_file(h)
                self.end_headers()
                f = open(h)
                self.wfile.write(f.read())
                f.close()
                return
            else:
                for root in [GEUL_STAGE, GEUL_ROOT]:
                    p = root + sep + relpath
                    if os.path.exists(p):
                        return self.serve_file(p)
            return
        except IOError:
            self.send_error(404, 'File Not Found: %s' % self.path)
            self.wfile.write("")
        except NotModified:
            self.send_response(304)
            self.end_headers()
            self.wfile.write('Not Modified')
     

def main():
    try:
        # prepare server config
        host = 'localhost'
        if len(sys.argv) > 1:
            port = int(sys.argv[1])
        else:
            port = 9301
        # start server
        server = HTTPServer((host, port), PreviewHandler)
        print 'preview server started at http://%s:%d/' % (host, port)
        server.serve_forever()
    except KeyboardInterrupt:
        print 'preview server stopped'
        server.socket.close()

if __name__ == '__main__':
    main()
